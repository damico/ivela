package org.ivela.offline.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChallengeExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public ChallengeExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    protected ChallengeExample(ChallengeExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table challenge
     *
     * @ibatorgenerated Thu Apr 15 14:20:41 BRT 2010
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andChallidIsNull() {
            addCriterion("challid is null");
            return this;
        }

        public Criteria andChallidIsNotNull() {
            addCriterion("challid is not null");
            return this;
        }

        public Criteria andChallidEqualTo(String value) {
            addCriterion("challid =", value, "challid");
            return this;
        }

        public Criteria andChallidNotEqualTo(String value) {
            addCriterion("challid <>", value, "challid");
            return this;
        }

        public Criteria andChallidGreaterThan(String value) {
            addCriterion("challid >", value, "challid");
            return this;
        }

        public Criteria andChallidGreaterThanOrEqualTo(String value) {
            addCriterion("challid >=", value, "challid");
            return this;
        }

        public Criteria andChallidLessThan(String value) {
            addCriterion("challid <", value, "challid");
            return this;
        }

        public Criteria andChallidLessThanOrEqualTo(String value) {
            addCriterion("challid <=", value, "challid");
            return this;
        }

        public Criteria andChallidLike(String value) {
            addCriterion("challid like", value, "challid");
            return this;
        }

        public Criteria andChallidNotLike(String value) {
            addCriterion("challid not like", value, "challid");
            return this;
        }

        public Criteria andChallidIn(List values) {
            addCriterion("challid in", values, "challid");
            return this;
        }

        public Criteria andChallidNotIn(List values) {
            addCriterion("challid not in", values, "challid");
            return this;
        }

        public Criteria andChallidBetween(String value1, String value2) {
            addCriterion("challid between", value1, value2, "challid");
            return this;
        }

        public Criteria andChallidNotBetween(String value1, String value2) {
            addCriterion("challid not between", value1, value2, "challid");
            return this;
        }

        public Criteria andChallvalueIsNull() {
            addCriterion("challvalue is null");
            return this;
        }

        public Criteria andChallvalueIsNotNull() {
            addCriterion("challvalue is not null");
            return this;
        }

        public Criteria andChallvalueEqualTo(Double value) {
            addCriterion("challvalue =", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueNotEqualTo(Double value) {
            addCriterion("challvalue <>", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueGreaterThan(Double value) {
            addCriterion("challvalue >", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueGreaterThanOrEqualTo(Double value) {
            addCriterion("challvalue >=", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueLessThan(Double value) {
            addCriterion("challvalue <", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueLessThanOrEqualTo(Double value) {
            addCriterion("challvalue <=", value, "challvalue");
            return this;
        }

        public Criteria andChallvalueIn(List values) {
            addCriterion("challvalue in", values, "challvalue");
            return this;
        }

        public Criteria andChallvalueNotIn(List values) {
            addCriterion("challvalue not in", values, "challvalue");
            return this;
        }

        public Criteria andChallvalueBetween(Double value1, Double value2) {
            addCriterion("challvalue between", value1, value2, "challvalue");
            return this;
        }

        public Criteria andChallvalueNotBetween(Double value1, Double value2) {
            addCriterion("challvalue not between", value1, value2, "challvalue");
            return this;
        }

        public Criteria andUidIsNull() {
            addCriterion("uid is null");
            return this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("uid is not null");
            return this;
        }

        public Criteria andUidEqualTo(Long value) {
            addCriterion("uid =", value, "uid");
            return this;
        }

        public Criteria andUidNotEqualTo(Long value) {
            addCriterion("uid <>", value, "uid");
            return this;
        }

        public Criteria andUidGreaterThan(Long value) {
            addCriterion("uid >", value, "uid");
            return this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Long value) {
            addCriterion("uid >=", value, "uid");
            return this;
        }

        public Criteria andUidLessThan(Long value) {
            addCriterion("uid <", value, "uid");
            return this;
        }

        public Criteria andUidLessThanOrEqualTo(Long value) {
            addCriterion("uid <=", value, "uid");
            return this;
        }

        public Criteria andUidIn(List values) {
            addCriterion("uid in", values, "uid");
            return this;
        }

        public Criteria andUidNotIn(List values) {
            addCriterion("uid not in", values, "uid");
            return this;
        }

        public Criteria andUidBetween(Long value1, Long value2) {
            addCriterion("uid between", value1, value2, "uid");
            return this;
        }

        public Criteria andUidNotBetween(Long value1, Long value2) {
            addCriterion("uid not between", value1, value2, "uid");
            return this;
        }

        public Criteria andUnitIdIsNull() {
            addCriterion("unit_id is null");
            return this;
        }

        public Criteria andUnitIdIsNotNull() {
            addCriterion("unit_id is not null");
            return this;
        }

        public Criteria andUnitIdEqualTo(Integer value) {
            addCriterion("unit_id =", value, "unitId");
            return this;
        }

        public Criteria andUnitIdNotEqualTo(Integer value) {
            addCriterion("unit_id <>", value, "unitId");
            return this;
        }

        public Criteria andUnitIdGreaterThan(Integer value) {
            addCriterion("unit_id >", value, "unitId");
            return this;
        }

        public Criteria andUnitIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("unit_id >=", value, "unitId");
            return this;
        }

        public Criteria andUnitIdLessThan(Integer value) {
            addCriterion("unit_id <", value, "unitId");
            return this;
        }

        public Criteria andUnitIdLessThanOrEqualTo(Integer value) {
            addCriterion("unit_id <=", value, "unitId");
            return this;
        }

        public Criteria andUnitIdIn(List values) {
            addCriterion("unit_id in", values, "unitId");
            return this;
        }

        public Criteria andUnitIdNotIn(List values) {
            addCriterion("unit_id not in", values, "unitId");
            return this;
        }

        public Criteria andUnitIdBetween(Integer value1, Integer value2) {
            addCriterion("unit_id between", value1, value2, "unitId");
            return this;
        }

        public Criteria andUnitIdNotBetween(Integer value1, Integer value2) {
            addCriterion("unit_id not between", value1, value2, "unitId");
            return this;
        }

        public Criteria andRetriesIsNull() {
            addCriterion("retries is null");
            return this;
        }

        public Criteria andRetriesIsNotNull() {
            addCriterion("retries is not null");
            return this;
        }

        public Criteria andRetriesEqualTo(Short value) {
            addCriterion("retries =", value, "retries");
            return this;
        }

        public Criteria andRetriesNotEqualTo(Short value) {
            addCriterion("retries <>", value, "retries");
            return this;
        }

        public Criteria andRetriesGreaterThan(Short value) {
            addCriterion("retries >", value, "retries");
            return this;
        }

        public Criteria andRetriesGreaterThanOrEqualTo(Short value) {
            addCriterion("retries >=", value, "retries");
            return this;
        }

        public Criteria andRetriesLessThan(Short value) {
            addCriterion("retries <", value, "retries");
            return this;
        }

        public Criteria andRetriesLessThanOrEqualTo(Short value) {
            addCriterion("retries <=", value, "retries");
            return this;
        }

        public Criteria andRetriesIn(List values) {
            addCriterion("retries in", values, "retries");
            return this;
        }

        public Criteria andRetriesNotIn(List values) {
            addCriterion("retries not in", values, "retries");
            return this;
        }

        public Criteria andRetriesBetween(Short value1, Short value2) {
            addCriterion("retries between", value1, value2, "retries");
            return this;
        }

        public Criteria andRetriesNotBetween(Short value1, Short value2) {
            addCriterion("retries not between", value1, value2, "retries");
            return this;
        }
    }
}